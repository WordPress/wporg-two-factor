import { useSelect } from '@wordpress/data';
import { store as coreDataStore, useEntityRecord } from '@wordpress/core-data';

/**
 * Fetch the user record.
 *
 * @param userId
 */
export function getUserRecord( userId ) {
	const userRecord = useEntityRecord( 'root', 'user', userId );

	// Polyfill in isSaving.
	if ( undefined === userRecord.isSaving ) {
		userRecord.isSaving = useSelect( ( select ) =>
			select( coreDataStore ).isSavingEntityRecord(
				'root',
				'user',
				userId
			)
		);
	}

	// Initialize the password as an empty string, necessary for resetting incomplete state when leaving the password setting page.
	if ( userRecord.record && undefined === userRecord.record.password ) {
		userRecord.record.password = '';
	}

	return userRecord;
}

/**
 * Refresh a `useEntityRecord` object from the REST API.
 *
 * This is necessary after an the underlying data in the database has been changed by a method other than
 * `record.save()`. When that happens, the `record` object isn't automatically updated, and needs to be manually
 * refreshed to get the latest data.
 *
 * todo Replace this with native method if one is added in https://github.com/WordPress/gutenberg/issues/47746.
 *
 * @param record An record object that was generated by `useEntityRecord()`.
 */
export function refreshRecord( record ) {
	// The fake key will be ignored by the REST API because it isn't a registered field. But the request will still
	// result in the latest data being returned.
	record.edit( { refreshRecordFakeKey: '' } );
	record.save();
}
