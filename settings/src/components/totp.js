/**
 * WordPress dependencies
 */
import apiFetch from '@wordpress/api-fetch';
import { Button, Notice, __experimentalNumberControl as NumberControl } from '@wordpress/components';
import { Icon, cancelCircleFilled } from '@wordpress/icons';
import { RawHTML, useCallback, useEffect, useState } from '@wordpress/element';

/**
 * Internal dependencies
 */
import SetupProgressBar from './setup-progress-bar';

export default function TOTP( { userRecord, clickScreenLink } ) {
	const enabledProviders = Object.values( userRecord.record[ '2fa_enabled_providers' ] );
	const totpStatus       = enabledProviders.includes( 'Two_Factor_Totp' ) ? 'enabled' : 'disabled';

	return (
		<>
			{ 'disabled' === totpStatus &&
				<Setup
					userID={ userRecord.record.id }
					clickScreenLink={ clickScreenLink }
				/>
			}

			{ 'enabled' === totpStatus && <Manage /> }
		</>
	);
}

/**
 * Setup the TOTP provider.
 */
function Setup( { userID, clickScreenLink } ) {
	const [ secretKey, setSecretKey ]     = useState( '' );
	const [ qrCodeUrl, setQrCodeUrl ]     = useState( '' );
	const [ verifyCode, setVerifyCode ]   = useState( '' );
	const [ error, setError ]             = useState( '' );
	const [ setupMethod, setSetupMethod ] = useState( 'qr-code' );

	// Fetch the data needed to setup TOTP.
	useEffect( () => {
		// useEffect callbacks can't be async directly, because that'd return the promise as a "cleanup" function.
		const fetchSetupData = async () => {
			const response = await apiFetch( {
				path: '/wporg-two-factor/1.0/totp-setup?user_id=' + userID
			} );

			setSecretKey( response[ 'secret_key' ] );
			setQrCodeUrl( response[ 'qr_code_url' ] );
		};

		fetchSetupData();
	}, [] );

	// Enable TOTP when button clicked.
	// todo maybe move this to a sep func to reduce clutter in this func, but would have to pass in a lot of values/functions. same for fetchsetupdata
	const handleEnable = useCallback( async ( event ) => {
		event.preventDefault();

		try {
			await apiFetch( {
				path: '/two-factor/1.0/totp/',
				method: 'POST',
				data: {
					user_id: userID,
					key: secretKey,
					code: verifyCode,
				},
			} );

			// todo refresh userrecord. otherwise 'account status' screen still shows disabled after enabling and clicking 'back'

			clickScreenLink( event, 'backup-codes' );

		} catch( error ) {
			setError( error.message );
		}
	} );

	const cancelUrl = new URL( document.location.href );
	cancelUrl.searchParams.set( 'screen', 'account-status' );

	return (
		<>
			<SetupProgressBar step="totp" />

			<p>
				Two-Factor Authentication adds an extra layer of security to your account.
				Once enabled, logging in to WordPress.org will require you to enter a unique passcode
				generated by an app on your mobile device , in addition to your username and password.
			</p>

			<p>
				Not sure what this screen means? You may need to download Authy or Google Authenticator for your phone.
				{/* todo add links to those. maybe pick different ones? or link to an article/video where they can learn more */ }
			</p>

			<SetupMethod
				setupMethod={ setupMethod }
				setSetupMethod={ setSetupMethod }
				qrCodeUrl={ qrCodeUrl }
				secretKey={ secretKey }
			/>

			<p>Then enter the six digit code provided by the app:</p>

			<SetupForm
				handleEnable={ handleEnable }
				verifyCode={ verifyCode }
				setVerifyCode={ setVerifyCode }
				qrCodeUrl={ qrCodeUrl }
				secretKey={ secretKey }
				cancelUrl={ cancelUrl }
				clickScreenLink={ clickScreenLink }
			/>

			{ error &&
				<Notice status="error" isDismissible={ false }>
					<Icon icon={ cancelCircleFilled } />
					{ error }
				</Notice>
			}
		</>
	);
}

/**
 * Render both methods for setting up TOTP in an app.
 */
function SetupMethod( { setupMethod, setSetupMethod, qrCodeUrl, secretKey } ) {
	if ( 'qr-code' === setupMethod ) {
		return (
			<>
				<p>
					Scan this QR code with the authenticator app on your mobile device.
					<br />

					<Button isLink onClick={ () => setSetupMethod( 'manual' ) }>
						Can't scan the code?
					</Button>
				</p>

				<div className="wporg-2fa__qr-code">
					{ ! qrCodeUrl && 'Loading...' }

					{ qrCodeUrl &&
						<a href={ qrCodeUrl }>
							<RawHTML>
								{ createQrCode( qrCodeUrl ) }
							</RawHTML>
						</a>
					}
				</div>
			</>
		);
	}

	if ( 'manual' === setupMethod ) {
		const readableSecretKey = secretKey.match( /.{1,4}/g ).join( ' ' );

		return (
			<>
				<p>
					Enter this time code into your mobile app.<br />

					<Button isLink onClick={ () => setSetupMethod( 'qr-code' ) }>
						Prefer to scan a QR code?
					</Button>
				</p>

				<code className="wporg-2fa__manual-code">
					{ readableSecretKey }
				</code>
			</>
		);
	}
}

/*
 * Generate a QR code SVG.
 *
 * @param {string} data The data to encode in the QR code.
 */
function createQrCode( data ) {
	const { qrcode } = window; // Loaded via block.json.

	/*
	 * 0 = Automatically select the version, to avoid going over the limit of URL
	 *     length.
	 * L = Least amount of error correction, because it's not needed when scanning
	 *     on a monitor, and it lowers the image size.
	 */
	const qr = qrcode( 0, 'L' );
	qr.addData( data );
	qr.make();

	return qr.createSvgTag( 5 );
}

/**
 * Render the form for entering the TOTP code.
 */
function SetupForm( { handleEnable, verifyCode, setVerifyCode, qrCodeUrl, secretKey, cancelUrl, clickScreenLink } ) {
	const verifyCodeLength = 6;
	const canSubmit        = qrCodeUrl && secretKey && verifyCode && verifyCode.length === verifyCodeLength;

	return (
		<form onSubmit={ handleEnable }>
			<NumberControl
				className="wporg-2fa__verify-code"
				placeholder="123456"
				min="0"
				max="999999"
				maxLength={ verifyCodeLength /* todo this isn't working. gutenberg bug? */ }
				value={ verifyCode }
				onChange={
					/*
					 * The value is passed as a string when clicking the button with a mouse, but as an int when
					 * pressing enter on the keyboard. If it's left as an int, the button will be disabled because
					 * `canSubmit` checks the `.length` property. That prevents the form from submitting, so it
					 * needs to be normalized to a string.
					 */
					( code ) => setVerifyCode( code.toString() )
				}
				hideHTMLArrows={ false }
				spinControls="none"
				required={ true }
			/>

			<div>
				<Button type="submit" isPrimary disabled={ ! canSubmit }>
					Enable
				</Button>

				<Button
					isLink
					href={ cancelUrl.href }
					onClick={ ( event ) => clickScreenLink( event, 'account-status' ) }
				>
					Cancel
					{/* todo this should look like a button not a link */}
				</Button>
			</div>
		</form>
	);
}

// todo maybe create separate files for setup and manage?
function Manage() {
	return (
		<>
			You've enabled two-step authentication on your account â€” smart move! When you log in to WordPress.com, you'll need to enter your username and password, as well as a unique passcode generated by an app on your mobile device.

			Switching to a new device? Follow these steps to avoid losing access to your account.
			https://wordpress.com/support/security/two-step-authentication/#moving-to-a-new-device

			Status: Two-step authentication is currently on.
		</>
	);
}
